#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <set>
#include <cmath>
using namespace std;


/*
 首先深度优先搜索判断它有几个连通分量。
 如果有多个，那就输出Error: x components，如果只有一个，
 就两次深度优先搜索，先从一个结点dfs后保留最高高度拥有的结点们，
 然后从这些结点中的其中任意一个开始dfs得到最高高度的结点们，
 这两个结点集合的并集就是所求
 */
int n, maxheight = 0;
vector<vector<int>> v;
bool visit[10010];
set<int> s;
vector<int> temp;
void dfs(int node,int height){
    if(height>maxheight){
        maxheight=height;
        temp.clear();
        temp.push_back(node);
    }else if(height==maxheight){
        temp.push_back(node);
    }
    visit[node]=true;
    for (int i = 0; i < v[node].size(); ++i) {
        if(!visit[v[node][i]]){
            dfs(v[node][i],height+1);
        }
    }
}
int main() {
    scanf("%d", &n);
    v.resize(n + 1);//1~n
    int a, b, cnt = 0, s1 = 0;
    for(int i = 0; i < n - 1; i++) {
        scanf("%d%d", &a, &b);
        v[a].push_back(b);
        v[b].push_back(a);
    }

    for (int i = 1; i <= n ; ++i) {
        if(!visit[i]){
            dfs(i,1);
            if(!temp.empty())s1=temp[0];
            for (int j = 0; j < temp.size(); ++j) {
                s.insert(temp[j]);
            }
            cnt++;
        }
    }

    //再次遍历，从s1开始
    if(cnt>=2)printf("Error: %d components", cnt);
    else{
        temp.clear();
        maxheight=0;
        fill(visit,visit+10010,false);
        dfs(s1,1);
        for (int i = 0; i < temp.size(); ++i) {
            s.insert(temp[i]);
        }
        for(auto it:s){
            printf("%d\n",it);
        }
    }
    return 0;
}
