#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <set>
#include <string>
using namespace std;


/*
总的来说是一个判断一个图的连通分量的个数，用图的遍历解决，深度优先遍历。
1.因为给的是字母，要用两个map把它们转换成数字，从1开始排列命名所有不同的人的id，存储在两个map里面，一个字符串对应id，一个id对应字符串，方便查找，正好顺便统计了总共的人数idNumber。
2.建立两个数组，weight和G，分别存储每条边的权值和每个结点的权值，因为这两个题目中都要求得后判断。
3.用传递引用的方法深度优先dfs，这样传入的参数在dfs后还能保存想要求得的值
4.遍历过一条边之后就把这条边的权值设为0（ G[u][v] = G[v][u] = 0;）防止出现回路遍历死循环
 */
map<string, int> stringToInt;
map<int, string> intToString;
map<string, int> ans;
int idNumber = 1, k;
int stoifunc(string s){
    if(stringToInt[s]==0){
        stringToInt[s]=idNumber;
        intToString[idNumber]=s;
        return idNumber++;
    }else{
        return stringToInt[s];
    }
}

int G[2010][2010], weight[2010];
bool vis[2010];
void dfs(int u,int &head,int &numMember,int &totalWeight){
    vis[u]=true;
    numMember++;
    if(weight[u]>weight[head]){
        head=u;
    }
    for (int v = 1; v < idNumber; ++v) {
        if(G[u][v]>0){
            totalWeight+=G[u][v];
            G[u][v]=G[v][u]=0;//防止回路
            if(!vis[v]){
                dfs(v,head,numMember,totalWeight);
            }
        }
    }
}

void dfsTrave(){
    for (int i = 1; i < idNumber; ++i) {
        if (!vis[i]){
            int head=i,numMember=0,totalWeight=0;
            dfs(i,head,numMember,totalWeight);
            if(numMember>2&&totalWeight>k){
                ans[intToString[head]]=numMember;
            }
        }
    }
}
int main() {
    int n, w;
    cin >> n >> k;
    string s1, s2;
    for(int i = 0; i < n; i++) {
        cin >> s1 >> s2 >> w;
        int id1 = stoifunc(s1);
        int id2 = stoifunc(s2);
        weight[id1] += w;
        weight[id2] += w;
        G[id1][id2] += w;
        G[id2][id1] += w;
    }
    dfsTrave();
    cout << ans.size() << endl;
    for(auto it = ans.begin(); it != ans.end(); it++)
        cout << it->first << " " << it->second << endl;
    return 0;
}
