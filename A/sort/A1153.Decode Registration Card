#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;


/*
先把所有考生的准考证和分数记录下来
1、按照等级查询，枚举选取匹配的学生，然后排序即可
2、按照考场查询，枚举选取匹配的学生，然后计数、求和
3、按日期查询每个考场人数，用unordered_map存储，最后排序汇总

 注意：
1、第三个用map存储会超时，用unordered_map就不会超时
2、排序传参建议用引用传参，这样更快，虽然有时候不用引用传参也能通过，
 但还是尽量用，养成好习惯
 */

struct node {
    string t;
    int value;
};

bool cmp(node &a, node &b) {
    return a.value != b.value ? a.value > b.value : a.t < b.t;
}

int main() {
    int n, k, num;
    cin >> n >> k;
    string s;
    vector<node> v(n);
    for (int i = 0; i < n; i++)cin >> v[i].t >> v[i].value;
    for (int i = 1; i <= k; ++i) {
        cin >> num >> s;
        printf("Case %d: %d %s\n", i, num, s.c_str());
        vector<node> ans;
        int cnt = 0, sum = 0;
        if (num == 1) {
            for (int j = 0; j < n; ++j) {
                if (v[j].t[0] == s[0])ans.push_back(v[j]);
            }
        } else if (num == 2) {
            //取第2-4位数字为考场号
            for (int j = 0; j < n; ++j) {
                if (v[j].t.substr(1, 3) == s) {
                    cnt++;
                    sum += v[j].value;
                }
            }
            if (cnt != 0) printf("%d %d\n", cnt, sum);
        } else if (num == 3) {
            //查询对应的日期以及人数
            unordered_map<string, int> m;
            for (int j = 0; j < n; ++j) {
                if (v[j].t.substr(4, 6) == s) {
                    m[v[j].t.substr(1, 3)]++;
                }
            }
            for (auto it:m) {
                ans.push_back({it.first, it.second});
            }
        }

        sort(ans.begin(), ans.end(), cmp);

        for (int j = 0; j < ans.size(); j++)
            printf("%s %d\n", ans[j].t.c_str(), ans[j].value);
        if (((num == 1 || num == 3) && ans.size() == 0) || (num == 2 && cnt == 0)) printf("NA\n");

    }


    return 0;
}
