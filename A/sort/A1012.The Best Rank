#include <iostream>
#include <vector>
//#include <map>
#include <string>
#include <set>
#include <algorithm>
#include<stdio.h>
#include<string.h>
#include <cmath>
#include <queue>
#include <climits>

using namespace std;

/*
 1.使用结构体储存id，best，4科分数，4科排名
 2.注意排序，使用flag代表4次排序，分别从ACME的顺序来，注意并列的处理
 3.使用exist数组来判断是否存在对应的查询对象
 4.如果存在就输出（使用i+1来保证所有为0的都是不存在的）
 */

struct node{
    int id,best;
    int score[4],rank[4];
}stu[2001];
int exist[1000000],flag=-1;
bool cmp(node a,node b){
    return a.score[flag]>b.score[flag];
}
int main() {
    int n,m,id;
    scanf("%d%d",&n,&m);
    for (int i = 0; i < n; ++i) {
        scanf("%d%d%d%d",&stu[i].id,&stu[i].score[1],&stu[i].score[2],&stu[i].score[3]);
        stu[i].score[0]=(stu[i].score[1] + stu[i].score[2] + stu[i].score[3])/3.0+0.5;
    }//得到各个成绩

    for(flag=0;flag<=3;flag++){
        sort(stu,stu+n,cmp);
        stu[0].rank[flag]=1;
        for (int i = 1; i < n; ++i) {
            stu[i].rank[flag]=i+1;
            if(stu[i].score[flag]==stu[i-1].score[flag]){
                stu[i].rank[flag]=stu[i-1].rank[flag];
            }//解决分数相同的排名
        }

    }//得到各科排名

    for (int i = 0; i < n; ++i) {
        exist[stu[i].id]=i+1;
        stu[i].best=0;
        int minn=stu[i].rank[0];
        for (int j = 1; j <= 3; ++j) {
            if(minn>stu[i].rank[j]){
                minn=stu[i].rank[j];
                stu[i].best=j;
            }
        }
    }//得到是否存在，以及确定最好排名和对应的科目

    char c[5]={'A','C','M','E'};
    for (int i = 0; i < m; ++i) {
        scanf("%d",&id);
        int temp=exist[id];
        if(temp){
            int best=stu[temp-1].best;
            printf("%d %c\n",stu[temp-1].rank[best],c[best]);
        }else{
            printf("N/A\n");
        }
    }
    return 0;
}

