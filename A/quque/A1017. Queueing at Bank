#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <set>
#include <algorithm>
#include <cmath>
#include <queue>
#include <climits>

using namespace std;

/*
 1.定义node结点表示一个客户的到达时间和服务时间
 2.将客户的到达时间排序
 3.如果客户早于8*60*60=28800到达，也即客户到达时间小于开始服务时间，则等待，记录等待时间
 4.否则直接加上窗口对应需要的服务时间
 */

struct node{
    int come,time;
}tmpcustomer;
bool cmp(node a,node b){
    return a.come<b.come;
}
int main() {
    int n, k;
    scanf("%d%d", &n, &k);
    vector<node> custom;
    for (int i = 0; i < n; ++i) {
        int hh, mm, ss, time;
        scanf("%d:%d:%d %d", &hh, &mm, &ss, &time);
        int cometime = hh * 3600 + mm * 60 + ss;
        if(cometime > 61200) continue;//晚于下午5点直接终止
        tmpcustomer = {cometime, time * 60};
        custom.push_back(tmpcustomer);
    }//得到对应的客户队列

    //计算服务时间
    double res=0.0;
    sort(custom.begin(),custom.end(),cmp);
    vector<int> window(k,28800);

    for (int i = 0; i < custom.size(); ++i) {
        int tmpindex=0,minfinish=window[0];
        for (int j = 1; j < k ; ++j) {
            if(minfinish>window[j]){
                tmpindex=j;
                minfinish=window[j];
            }
        }//找到应该进入的队伍

        if(window[tmpindex]<=custom[i].come){
            window[tmpindex]=custom[i].come+custom[i].time;
        }else{
            res+=(window[tmpindex]-custom[i].come);
            window[tmpindex]+=custom[i].time;
        }
    }

    if(custom.size() == 0)
        printf("0.0");
    else
        printf("%.1f", res / 60.0 / custom.size());
    return 0;
}

