其实有一种更好的方法，就是设定i=2，i一直递增，当N%i==0的时候，N/=i，否则i++，直到i>N，这样找到的所有N%i==0的i就是N的所有的质数因子

但是这样为何可行呢，

我们假设从2开始，找到的第一个N%i==0的i为a1，首先a1一定是质数，因为假如a1是合数的话在2和a1之间一定存在其他N可以整除的质数，但是i是从2开始找到的第一个可以整除的数，因此i只能是质数，也就是说i是N最小的质因子

我们进行N/=i，直到（N/=i）!=0,这里得到的每一个i都是N的质因子，假如这个时候N还有其他质因子存在，那么N>i，否则N<i算法结束

这个时候从2到a1的所有的质因子都分解完毕

然后从a1继续往后找，找到第二个N可以整除的数a2，a2不可能是合数，因为假如a2是和数的话，2到a1，或者是a1到a2之间一定存在没有分解的质数，而这是不可能的，所以a2一定是质数，且是N第二大的质因子，进行N/=a2，直到（N/=a2）!=0

继续以上操作，当找到最后一个质因子的时候，N==i，这个时候(N/=i)=1<i，算法结束，至此，N的所有质因子都找到了

#include <iostream>
using namespace std;
int main()
{
    long num;
    cin>>num;
     
    for(int i=2;i<=num;)
    {
        if(num%i==0)
        {
            cout<<i<<" ";
            num/=i;
        }
        else i++;
    }
    return 0;
}
